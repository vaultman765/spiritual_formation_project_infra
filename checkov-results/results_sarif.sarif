{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.466", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_35", "name": "Ensure CloudTrail logs are encrypted at rest using KMS CMKs", "shortDescription": {"text": "Ensure CloudTrail logs are encrypted at rest using KMS CMKs"}, "fullDescription": {"text": "Ensure CloudTrail logs are encrypted at rest using KMS CMKs"}, "help": {"text": "Ensure CloudTrail logs are encrypted at rest using KMS CMKs\nResource: aws_cloudtrail.main"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/logging-7"}, {"id": "CKV_AWS_252", "name": "Ensure CloudTrail defines an SNS Topic", "shortDescription": {"text": "Ensure CloudTrail defines an SNS Topic"}, "fullDescription": {"text": "Ensure CloudTrail defines an SNS Topic"}, "help": {"text": "Ensure CloudTrail defines an SNS Topic\nResource: aws_cloudtrail.main"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-aws-cloudtrail-defines-an-sns-topic"}, {"id": "CKV_AWS_26", "name": "Ensure all data stored in the SNS topic is encrypted", "shortDescription": {"text": "Ensure all data stored in the SNS topic is encrypted"}, "fullDescription": {"text": "Ensure all data stored in the SNS topic is encrypted"}, "help": {"text": "Ensure all data stored in the SNS topic is encrypted\nResource: aws_sns_topic.alerts"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-15"}, {"id": "CKV_AWS_382", "name": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1", "shortDescription": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "fullDescription": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "help": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1\nResource: aws_security_group.sm_rotation"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-382"}, {"id": "CKV_AWS_50", "name": "X-Ray tracing is enabled for Lambda", "shortDescription": {"text": "X-Ray tracing is enabled for Lambda"}, "fullDescription": {"text": "X-Ray tracing is enabled for Lambda"}, "help": {"text": "X-Ray tracing is enabled for Lambda\nResource: aws_lambda_function.apprunner_redeploy[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-serverless-policies/bc-aws-serverless-4"}, {"id": "CKV_AWS_272", "name": "Ensure AWS Lambda function is configured to validate code-signing", "shortDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "fullDescription": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "help": {"text": "Ensure AWS Lambda function is configured to validate code-signing\nResource: aws_lambda_function.apprunner_redeploy[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-272"}, {"id": "CKV_AWS_115", "name": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "help": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit\nResource: aws_lambda_function.apprunner_redeploy[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-for-function-level-concurrent-execution-limit"}, {"id": "CKV_AWS_241", "name": "Ensure that Kinesis Firehose Delivery Streams are encrypted with CMK", "shortDescription": {"text": "Ensure that Kinesis Firehose Delivery Streams are encrypted with CMK"}, "fullDescription": {"text": "Ensure that Kinesis Firehose Delivery Streams are encrypted with CMK"}, "help": {"text": "Ensure that Kinesis Firehose Delivery Streams are encrypted with CMK\nResource: aws_kinesis_firehose_delivery_stream.waf"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-aws-kinesis-firehose-delivery-streams-are-encrypted-with-cmk"}, {"id": "CKV_AWS_240", "name": "Ensure Kinesis Firehose delivery stream is encrypted", "shortDescription": {"text": "Ensure Kinesis Firehose delivery stream is encrypted"}, "fullDescription": {"text": "Ensure Kinesis Firehose delivery stream is encrypted"}, "help": {"text": "Ensure Kinesis Firehose delivery stream is encrypted\nResource: aws_kinesis_firehose_delivery_stream.waf"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-aws-kinesis-firehoses-delivery-stream-is-encrypted"}, {"id": "CKV_AWS_374", "name": "Ensure AWS CloudFront web distribution has geo restriction enabled", "shortDescription": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "fullDescription": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "help": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled\nResource: module.frontend_site_prod.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-374"}, {"id": "CKV_AWS_310", "name": "Ensure CloudFront distributions should have origin failover configured", "shortDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "fullDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "help": {"text": "Ensure CloudFront distributions should have origin failover configured\nResource: module.frontend_site_prod.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-310"}, {"id": "CKV_AWS_305", "name": "Ensure CloudFront distribution has a default root object configured", "shortDescription": {"text": "Ensure CloudFront distribution has a default root object configured"}, "fullDescription": {"text": "Ensure CloudFront distribution has a default root object configured"}, "help": {"text": "Ensure CloudFront distribution has a default root object configured\nResource: module.static_admin_prod.aws_cloudfront_distribution.static"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-305"}, {"id": "CKV_AWS_51", "name": "Ensure ECR Image Tags are immutable", "shortDescription": {"text": "Ensure ECR Image Tags are immutable"}, "fullDescription": {"text": "Ensure ECR Image Tags are immutable"}, "help": {"text": "Ensure ECR Image Tags are immutable\nResource: module.ecr_backend.aws_ecr_repository.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-24"}, {"id": "CKV_AWS_149", "name": "Ensure that Secrets Manager secret is encrypted using KMS CMK", "shortDescription": {"text": "Ensure that Secrets Manager secret is encrypted using KMS CMK"}, "fullDescription": {"text": "Ensure that Secrets Manager secret is encrypted using KMS CMK"}, "help": {"text": "Ensure that Secrets Manager secret is encrypted using KMS CMK\nResource: module.rds.aws_secretsmanager_secret.db"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-secrets-manager-secret-is-encrypted-using-kms"}, {"id": "CKV_AWS_293", "name": "Ensure that AWS database instances have deletion protection enabled", "shortDescription": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "fullDescription": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "help": {"text": "Ensure that AWS database instances have deletion protection enabled\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-293"}, {"id": "CKV_AWS_161", "name": "Ensure RDS database has IAM authentication enabled", "shortDescription": {"text": "Ensure RDS database has IAM authentication enabled"}, "fullDescription": {"text": "Ensure RDS database has IAM authentication enabled"}, "help": {"text": "Ensure RDS database has IAM authentication enabled\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-rds-database-has-iam-authentication-enabled"}, {"id": "CKV_AWS_353", "name": "Ensure that RDS instances have performance insights enabled", "shortDescription": {"text": "Ensure that RDS instances have performance insights enabled"}, "fullDescription": {"text": "Ensure that RDS instances have performance insights enabled"}, "help": {"text": "Ensure that RDS instances have performance insights enabled\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-353"}, {"id": "CKV_AWS_130", "name": "Ensure VPC subnets do not assign public IP by default", "shortDescription": {"text": "Ensure VPC subnets do not assign public IP by default"}, "fullDescription": {"text": "Ensure VPC subnets do not assign public IP by default"}, "help": {"text": "Ensure VPC subnets do not assign public IP by default\nResource: module.vpc.aws_subnet.public"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-vpc-subnets-do-not-assign-public-ip-by-default"}, {"id": "CKV_AWS_338", "name": "Ensure CloudWatch log groups retains logs for at least 1 year", "shortDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "fullDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "help": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year\nResource: module.vpc.aws_cloudwatch_log_group.vpc_flow[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-338"}, {"id": "CKV2_AWS_11", "name": "Ensure VPC flow logging is enabled in all VPCs", "shortDescription": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "fullDescription": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "help": {"text": "Ensure VPC flow logging is enabled in all VPCs\nResource: module.vpc.aws_vpc.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/logging-9-enable-vpc-flow-logging"}, {"id": "CKV2_AWS_5", "name": "Ensure that Security Groups are attached to another resource", "shortDescription": {"text": "Ensure that Security Groups are attached to another resource"}, "fullDescription": {"text": "Ensure that Security Groups are attached to another resource"}, "help": {"text": "Ensure that Security Groups are attached to another resource\nResource: module.rds.aws_security_group.rds[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-that-security-groups-are-attached-to-ec2-instances-or-elastic-network-interfaces-enis"}, {"id": "CKV2_AWS_30", "name": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled", "shortDescription": {"text": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled"}, "fullDescription": {"text": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled"}, "help": {"text": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-postgres-rds-has-query-logging-enabled"}, {"id": "CKV_AWS_144", "name": "Ensure that S3 bucket has cross-region replication enabled", "shortDescription": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "fullDescription": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "help": {"text": "Ensure that S3 bucket has cross-region replication enabled\nResource: aws_s3_bucket.cloudtrail"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-bucket-has-cross-region-replication-enabled"}, {"id": "CKV2_AWS_12", "name": "Ensure the default security group of every VPC restricts all traffic", "shortDescription": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "fullDescription": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "help": {"text": "Ensure the default security group of every VPC restricts all traffic\nResource: module.vpc.aws_vpc.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-4"}, {"id": "CKV2_AWS_39", "name": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones", "shortDescription": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "fullDescription": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "help": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones\nResource: module.route53_acm_api_prod.aws_route53_zone.hosted"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-39"}, {"id": "CKV2_AWS_38", "name": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones", "shortDescription": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "fullDescription": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "help": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones\nResource: module.route53_acm_api_prod.aws_route53_zone.hosted"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-2-38"}, {"id": "CKV2_AWS_32", "name": "Ensure CloudFront distribution has a response headers policy attached", "shortDescription": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "fullDescription": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "help": {"text": "Ensure CloudFront distribution has a response headers policy attached\nResource: module.frontend_site_prod.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-networking-65"}, {"id": "CKV_AWS_356", "name": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions", "shortDescription": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "fullDescription": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "help": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions\nResource: aws_iam_policy_document.apprunner_ci_prod"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-356"}, {"id": "CKV_AWS_117", "name": "Ensure that AWS Lambda function is configured inside a VPC", "shortDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "help": {"text": "Ensure that AWS Lambda function is configured inside a VPC\nResource: aws_lambda_function.apprunner_redeploy[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1"}, {"id": "CKV2_AWS_65", "name": "Ensure access control lists for S3 buckets are disabled", "shortDescription": {"text": "Ensure access control lists for S3 buckets are disabled"}, "fullDescription": {"text": "Ensure access control lists for S3 buckets are disabled"}, "help": {"text": "Ensure access control lists for S3 buckets are disabled\nResource: module.logging.aws_s3_bucket_ownership_controls.logs"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-112"}, {"id": "CKV2_AWS_47", "name": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability", "shortDescription": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "fullDescription": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "help": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability\nResource: module.frontend_site_prod.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-47"}, {"id": "CKV_AWS_18", "name": "Ensure the S3 bucket has access logging enabled", "shortDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "fullDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "help": {"text": "Ensure the S3 bucket has access logging enabled\nResource: module.logging.aws_s3_bucket.logs"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-13-enable-logging"}, {"id": "CKV2_AWS_57", "name": "Ensure Secrets Manager secrets should have automatic rotation enabled", "shortDescription": {"text": "Ensure Secrets Manager secrets should have automatic rotation enabled"}, "fullDescription": {"text": "Ensure Secrets Manager secrets should have automatic rotation enabled"}, "help": {"text": "Ensure Secrets Manager secrets should have automatic rotation enabled\nResource: module.rds.aws_secretsmanager_secret.db"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-2-57"}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_35", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure CloudTrail logs are encrypted at rest using KMS CMKs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/cloudtrail.tf"}, "region": {"startLine": 126, "endLine": 138, "snippet": {"text": "resource \"aws_cloudtrail\" \"main\" {\n  name                          = \"${var.name_prefix}-trail\"\n  s3_bucket_name                = aws_s3_bucket.cloudtrail.id\n  include_global_service_events = true\n  is_multi_region_trail         = true\n  enable_log_file_validation    = true\n  enable_logging                = true\n\n  cloud_watch_logs_group_arn = \"${aws_cloudwatch_log_group.cloudtrail.arn}:*\"\n  cloud_watch_logs_role_arn  = aws_iam_role.cloudtrail_to_logs.arn\n\n  tags = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_252", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure CloudTrail defines an SNS Topic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/cloudtrail.tf"}, "region": {"startLine": 126, "endLine": 138, "snippet": {"text": "resource \"aws_cloudtrail\" \"main\" {\n  name                          = \"${var.name_prefix}-trail\"\n  s3_bucket_name                = aws_s3_bucket.cloudtrail.id\n  include_global_service_events = true\n  is_multi_region_trail         = true\n  enable_log_file_validation    = true\n  enable_logging                = true\n\n  cloud_watch_logs_group_arn = \"${aws_cloudwatch_log_group.cloudtrail.arn}:*\"\n  cloud_watch_logs_role_arn  = aws_iam_role.cloudtrail_to_logs.arn\n\n  tags = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_26", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the SNS topic is encrypted"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/monitoring.tf"}, "region": {"startLine": 2, "endLine": 4, "snippet": {"text": "resource \"aws_sns_topic\" \"alerts\" {\n  name = \"${var.name_prefix}-alerts\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/secret_rotation.tf"}, "region": {"startLine": 2, "endLine": 19, "snippet": {"text": "resource \"aws_security_group\" \"sm_rotation\" {\n  # checkov:skip=CKV2_AWS_5\n  # Justification: This SG is attached to the SAR rotation Lambda via vpcSecurityGroupIds.\n  # The ENI is created inside the AWS-managed stack so Checkov can\u2019t see the link.\n  name        = \"${var.name_prefix}-sm-rotation\"\n  description = \"Secrets Manager rotation function egress within VPC\"\n  vpc_id      = module.vpc.vpc_id\n\n  egress {\n    description = \"Allow egress to VPC endpoints/NAT as required by Lambda runtime\"\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_50", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "X-Ray tracing is enabled for Lambda"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/secret_rotation_bridge.tf"}, "region": {"startLine": 96, "endLine": 118, "snippet": {"text": "resource \"aws_lambda_function\" \"apprunner_redeploy\" {\n  # checkov:skip=CKV_AWS_117\n  # Justification: Lambda calls App Runner public API only; VPC adds cold starts and isn\u2019t required.\n  count                          = var.enable_secret_rotation_autodeploy ? 1 : 0\n  function_name                  = local.lambda_name\n  role                           = aws_iam_role.apprunner_redeploy[0].arn\n  handler                        = \"index.handler\"\n  runtime                        = \"python3.12\"\n  filename                       = data.archive_file.apprunner_redeploy_zip.output_path\n  source_code_hash               = data.archive_file.apprunner_redeploy_zip.output_base64sha256\n  kms_key_arn                    = module.kms_logs.kms_key_arn\n  # reserved_concurrent_executions = 2\n  timeout                        = 30\n  environment {\n    variables = {\n      APP_RUNNER_ARN = module.apprunner.service_arn\n    }\n  }\n  dead_letter_config {\n    target_arn = aws_sns_topic.lambda_dlq.arn\n  }\n  tags = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_272", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure AWS Lambda function is configured to validate code-signing"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/secret_rotation_bridge.tf"}, "region": {"startLine": 96, "endLine": 118, "snippet": {"text": "resource \"aws_lambda_function\" \"apprunner_redeploy\" {\n  # checkov:skip=CKV_AWS_117\n  # Justification: Lambda calls App Runner public API only; VPC adds cold starts and isn\u2019t required.\n  count                          = var.enable_secret_rotation_autodeploy ? 1 : 0\n  function_name                  = local.lambda_name\n  role                           = aws_iam_role.apprunner_redeploy[0].arn\n  handler                        = \"index.handler\"\n  runtime                        = \"python3.12\"\n  filename                       = data.archive_file.apprunner_redeploy_zip.output_path\n  source_code_hash               = data.archive_file.apprunner_redeploy_zip.output_base64sha256\n  kms_key_arn                    = module.kms_logs.kms_key_arn\n  # reserved_concurrent_executions = 2\n  timeout                        = 30\n  environment {\n    variables = {\n      APP_RUNNER_ARN = module.apprunner.service_arn\n    }\n  }\n  dead_letter_config {\n    target_arn = aws_sns_topic.lambda_dlq.arn\n  }\n  tags = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_115", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/secret_rotation_bridge.tf"}, "region": {"startLine": 96, "endLine": 118, "snippet": {"text": "resource \"aws_lambda_function\" \"apprunner_redeploy\" {\n  # checkov:skip=CKV_AWS_117\n  # Justification: Lambda calls App Runner public API only; VPC adds cold starts and isn\u2019t required.\n  count                          = var.enable_secret_rotation_autodeploy ? 1 : 0\n  function_name                  = local.lambda_name\n  role                           = aws_iam_role.apprunner_redeploy[0].arn\n  handler                        = \"index.handler\"\n  runtime                        = \"python3.12\"\n  filename                       = data.archive_file.apprunner_redeploy_zip.output_path\n  source_code_hash               = data.archive_file.apprunner_redeploy_zip.output_base64sha256\n  kms_key_arn                    = module.kms_logs.kms_key_arn\n  # reserved_concurrent_executions = 2\n  timeout                        = 30\n  environment {\n    variables = {\n      APP_RUNNER_ARN = module.apprunner.service_arn\n    }\n  }\n  dead_letter_config {\n    target_arn = aws_sns_topic.lambda_dlq.arn\n  }\n  tags = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_241", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure that Kinesis Firehose Delivery Streams are encrypted with CMK"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/waf.tf"}, "region": {"startLine": 224, "endLine": 233, "snippet": {"text": "resource \"aws_kinesis_firehose_delivery_stream\" \"waf\" {\n  name        = \"aws-waf-logs-${var.name_prefix}\"\n  destination = \"extended_s3\"\n\n  extended_s3_configuration {\n    role_arn           = aws_iam_role.firehose_waf.arn\n    bucket_arn         = aws_s3_bucket.waf_logs.arn\n    buffering_interval = 300\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_240", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure Kinesis Firehose delivery stream is encrypted"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/waf.tf"}, "region": {"startLine": 224, "endLine": 233, "snippet": {"text": "resource \"aws_kinesis_firehose_delivery_stream\" \"waf\" {\n  name        = \"aws-waf-logs-${var.name_prefix}\"\n  destination = \"extended_s3\"\n\n  extended_s3_configuration {\n    role_arn           = aws_iam_role.firehose_waf.arn\n    bucket_arn         = aws_s3_bucket.waf_logs.arn\n    buffering_interval = 300\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/apprunner/main.tf"}, "region": {"startLine": 17, "endLine": 29, "snippet": {"text": "resource \"aws_security_group\" \"apprunner\" {\n  name        = \"${var.name_prefix}-apprunner-sg\"\n  description = \"App Runner VPC egress\"\n  vpc_id      = var.vpc_id\n  egress {\n    description = \"App Runner will use via the VPC connector (egress-only)\"\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_374", "ruleIndex": 9, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 110, "endLine": 188, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = var.domain_name\n\n  aliases = [var.domain_name]\n\n  web_acl_id = var.web_acl_arn\n\n  origin {\n    domain_name = aws_s3_bucket.site.bucket_regional_domain_name\n    origin_id   = \"s3-origin-${var.domain_name}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\n    }\n  }\n\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-origin-${var.domain_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  dynamic \"custom_error_response\" {\n    for_each = var.spa_mode ? [403, 404] : []\n    content {\n      error_code            = custom_error_response.value\n      response_code         = 200\n      response_page_path    = \"/index.html\"\n      error_caching_min_ttl = 0\n    }\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn # must be in us-east-1\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_310", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 110, "endLine": 188, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = var.domain_name\n\n  aliases = [var.domain_name]\n\n  web_acl_id = var.web_acl_arn\n\n  origin {\n    domain_name = aws_s3_bucket.site.bucket_regional_domain_name\n    origin_id   = \"s3-origin-${var.domain_name}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\n    }\n  }\n\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-origin-${var.domain_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  dynamic \"custom_error_response\" {\n    for_each = var.spa_mode ? [403, 404] : []\n    content {\n      error_code            = custom_error_response.value\n      response_code         = 200\n      response_page_path    = \"/index.html\"\n      error_caching_min_ttl = 0\n    }\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn # must be in us-east-1\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_310", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 94, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  web_acl_id = var.web_acl_arn\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\"\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_305", "ruleIndex": 11, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a default root object configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 94, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  web_acl_id = var.web_acl_arn\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\"\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_51", "ruleIndex": 12, "level": "error", "attachments": [], "message": {"text": "Ensure ECR Image Tags are immutable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/ecr/main.tf"}, "region": {"startLine": 1, "endLine": 9, "snippet": {"text": "resource \"aws_ecr_repository\" \"this\" {\n  name                 = var.repository_name\n  image_tag_mutability = var.image_tag_mutability\n  image_scanning_configuration { scan_on_push = var.scan_on_push }\n  encryption_configuration {\n    encryption_type = \"KMS\"\n    kms_key         = var.kms_key_arn\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_149", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Ensure that Secrets Manager secret is encrypted using KMS CMK"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 124, "endLine": 128, "snippet": {"text": "resource \"aws_secretsmanager_secret\" \"db\" {\n  # checkov:skip=CKV2_AWS_57: Automatic rotation controlled by Lambda every 30 days \n  name = local.secret_name\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_293", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 131, "endLine": 191, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible        = false\n  multi_az                   = var.multi_az\n  apply_immediately          = true\n  auto_minor_version_upgrade = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false # prod can override to true later\n\n  # Enhanced Monitoring\n  monitoring_interval = var.monitoring_interval\n  monitoring_role_arn = var.monitoring_interval > 0 ? var.monitoring_role_arn : null\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_161", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure RDS database has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 131, "endLine": 191, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible        = false\n  multi_az                   = var.multi_az\n  apply_immediately          = true\n  auto_minor_version_upgrade = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false # prod can override to true later\n\n  # Enhanced Monitoring\n  monitoring_interval = var.monitoring_interval\n  monitoring_role_arn = var.monitoring_interval > 0 ? var.monitoring_role_arn : null\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_353", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS instances have performance insights enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 131, "endLine": 191, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible        = false\n  multi_az                   = var.multi_az\n  apply_immediately          = true\n  auto_minor_version_upgrade = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false # prod can override to true later\n\n  # Enhanced Monitoring\n  monitoring_interval = var.monitoring_interval\n  monitoring_role_arn = var.monitoring_interval > 0 ? var.monitoring_role_arn : null\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_374", "ruleIndex": 9, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 108, "endLine": 178, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n  # checkov:skip=CKV_AWS_305 reason=\"Redirect-only distribution; default root object not applicable\"\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  web_acl_id          = var.web_acl_arn\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  dynamic \"logging_config\" {\n    for_each = var.log_bucket_name == null ? [] : [1]\n    content {\n      bucket          = \"${var.log_bucket_name}.s3.amazonaws.com\"\n      include_cookies = false\n      prefix          = \"cloudfront/redirect/${var.name_prefix}/\"\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_310", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 108, "endLine": 178, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n  # checkov:skip=CKV_AWS_305 reason=\"Redirect-only distribution; default root object not applicable\"\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  web_acl_id          = var.web_acl_arn\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  dynamic \"logging_config\" {\n    for_each = var.log_bucket_name == null ? [] : [1]\n    content {\n      bucket          = \"${var.log_bucket_name}.s3.amazonaws.com\"\n      include_cookies = false\n      prefix          = \"cloudfront/redirect/${var.name_prefix}/\"\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/endpoints/main.tf"}, "region": {"startLine": 16, "endLine": 43, "snippet": {"text": "resource \"aws_security_group\" \"vpce\" {\n  name        = local.sg_name\n  description = \"Allow HTTPS to VPC endpoints\"\n  vpc_id      = var.vpc_id\n\n  # Ingress from the whole VPC CIDR (matches your current file)\n  dynamic \"ingress\" {\n    for_each = var.allow_from_vpc_cidr ? [1] : []\n    content {\n      description = \"Ingress from the whole VPC CIDR\"\n      from_port   = 443\n      to_port     = 443\n      protocol    = \"tcp\"\n      cidr_blocks = [data.aws_vpc.this.cidr_block]\n    }\n  }\n\n  # Egress allow all (matches your current file)\n  egress {\n    description = \"Egress allow all\"\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_130", "ruleIndex": 17, "level": "error", "attachments": [], "message": {"text": "Ensure VPC subnets do not assign public IP by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/main.tf"}, "region": {"startLine": 44, "endLine": 51, "snippet": {"text": "resource \"aws_subnet\" \"public\" {\n  for_each                = local.create_vpc ? { for idx, cidr in var.public_subnet_cidrs : idx => cidr } : {}\n  vpc_id                  = aws_vpc.this[0].id\n  cidr_block              = each.value\n  availability_zone       = local.azs[tonumber(each.key)]\n  map_public_ip_on_launch = true\n  tags                    = merge(local.tags, { Name = \"${var.name_prefix}-public-${each.key}\" })\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/main.tf"}, "region": {"startLine": 133, "endLine": 143, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"vpc_flow\" {\n  count = var.enabled && var.enable_flow_logs ? 1 : 0\n\n  name              = \"/aws/vpc/${var.name_prefix}/flow-logs\"\n  retention_in_days = var.flow_logs_retention_days\n\n  # KMS is optional to keep staging simple; pass an ARN in prod\n  kms_key_id = var.flow_logs_kms_key_arn != \"\" ? var.flow_logs_kms_key_arn : null\n\n  tags = merge(local.tags, { Name = \"${var.name_prefix}-vpc-flow-logs\" })\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_11", "ruleIndex": 19, "level": "error", "attachments": [], "message": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/main.tf"}, "region": {"startLine": 20, "endLine": 28, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count                = local.create_vpc ? 1 : 0\n  cidr_block           = var.cidr_block\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  tags = merge(local.tags, {\n    Name = length(var.name_prefix) > 0 ? \"${var.name_prefix}-vpc\" : \"vpc\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 36, "endLine": 42, "snippet": {"text": "resource \"aws_security_group\" \"rds\" {\n  count       = var.enabled ? 1 : 0\n  name        = \"${var.name_prefix}-rds-sg\"\n  description = \"Allow Postgres from app runner + ecs + (optional) admin\"\n  vpc_id      = var.vpc_id\n  tags        = merge(local.tags, { Name = \"${var.name_prefix}-rds-sg\" })\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_30", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 131, "endLine": 191, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible        = false\n  multi_az                   = var.multi_az\n  apply_immediately          = true\n  auto_minor_version_upgrade = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false # prod can override to true later\n\n  # Enhanced Monitoring\n  monitoring_interval = var.monitoring_interval\n  monitoring_role_arn = var.monitoring_interval > 0 ? var.monitoring_role_arn : null\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/cloudtrail.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_s3_bucket\" \"cloudtrail\" {\n  bucket = local.ct_bucket_name\n  tags   = { Project = var.project, Env = var.env, Managed = \"Terraform\", Purpose = \"CloudTrailLogs\" }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/waf.tf"}, "region": {"startLine": 156, "endLine": 158, "snippet": {"text": "resource \"aws_s3_bucket\" \"waf_logs\" {\n  bucket = \"${var.name_prefix}-waf-logs\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 19, "endLine": 26, "snippet": {"text": "resource \"aws_s3_bucket\" \"site\" {\n  bucket = local.bucket_name\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/logging/main.tf"}, "region": {"startLine": 9, "endLine": 14, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  # checkov:skip=CKV_AWS_18: Don't need logging for the logging bucket\n  bucket        = local.bucket_name\n  force_destroy = false\n  tags          = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/s3/main.tf"}, "region": {"startLine": 12, "endLine": 15, "snippet": {"text": "resource \"aws_s3_bucket\" \"metadata\" {\n  bucket = local.metadata_bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/s3/main.tf"}, "region": {"startLine": 137, "endLine": 141, "snippet": {"text": "resource \"aws_s3_bucket\" \"frontend\" {\n  count  = var.create_frontend_bucket ? 1 : 0\n  bucket = local.frontend_bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 23, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/main.tf"}, "region": {"startLine": 20, "endLine": 28, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count                = local.create_vpc ? 1 : 0\n  cidr_block           = var.cidr_block\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  tags = merge(local.tags, {\n    Name = length(var.name_prefix) > 0 ? \"${var.name_prefix}-vpc\" : \"vpc\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_39", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_39", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_39", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_38", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_38", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_38", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_32", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 110, "endLine": 188, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = var.domain_name\n\n  aliases = [var.domain_name]\n\n  web_acl_id = var.web_acl_arn\n\n  origin {\n    domain_name = aws_s3_bucket.site.bucket_regional_domain_name\n    origin_id   = \"s3-origin-${var.domain_name}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\n    }\n  }\n\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-origin-${var.domain_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  dynamic \"custom_error_response\" {\n    for_each = var.spa_mode ? [403, 404] : []\n    content {\n      error_code            = custom_error_response.value\n      response_code         = 200\n      response_page_path    = \"/index.html\"\n      error_caching_min_ttl = 0\n    }\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn # must be in us-east-1\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_32", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 94, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  web_acl_id = var.web_acl_arn\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\"\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_32", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 108, "endLine": 178, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n  # checkov:skip=CKV_AWS_305 reason=\"Redirect-only distribution; default root object not applicable\"\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  web_acl_id          = var.web_acl_arn\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  dynamic \"logging_config\" {\n    for_each = var.log_bucket_name == null ? [] : [1]\n    content {\n      bucket          = \"${var.log_bucket_name}.s3.amazonaws.com\"\n      include_cookies = false\n      prefix          = \"cloudfront/redirect/${var.name_prefix}/\"\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_356", "ruleIndex": 27, "level": "warning", "attachments": [], "message": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/oidc.tf"}, "region": {"startLine": 68, "endLine": 82, "snippet": {"text": "data \"aws_iam_policy_document\" \"apprunner_ci_prod\" {\n  statement {\n    sid       = \"AppRunnerDeploy\"\n    effect    = \"Allow\"\n    actions   = [\"apprunner:StartDeployment\", \"apprunner:UpdateService\", \"apprunner:DescribeService\"]\n    resources = [module.apprunner.service_arn]\n  }\n  # checkov:skip=CKV_AWS_356: List operations require resource \"*\" as they operate at account level\n  statement {\n    sid       = \"AppRunnerReadList\"\n    effect    = \"Allow\"\n    actions   = [\"apprunner:ListServices\", \"apprunner:ListOperations\"]\n    resources = [\"*\"]\n  }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": " List operations require resource \"*\" as they operate at account level"}]}, {"ruleId": "CKV_AWS_356", "ruleIndex": 27, "level": "warning", "attachments": [], "message": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/secret_rotation.tf"}, "region": {"startLine": 53, "endLine": 63, "snippet": {"text": "data \"aws_iam_policy_document\" \"sm_rotation_inline\" {\n  statement {\n    actions   = [\"secretsmanager:GetSecretValue\", \"secretsmanager:PutSecretValue\", \"secretsmanager:DescribeSecret\", \"secretsmanager:UpdateSecretVersionStage\"]\n    resources = [var.rds_secret_arn]\n  }\n  # checkov:skip=CKV_AWS_356: rds:DescribeDBInstances is a service-level action that requires resource \"*\"\n  statement {\n    actions   = [\"rds:DescribeDBInstances\"]\n    resources = [\"*\"]\n  }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": " rds:DescribeDBInstances is a service-level action that requires resource \"*\""}]}, {"ruleId": "CKV_AWS_117", "ruleIndex": 28, "level": "warning", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/secret_rotation_bridge.tf"}, "region": {"startLine": 96, "endLine": 118, "snippet": {"text": "resource \"aws_lambda_function\" \"apprunner_redeploy\" {\n  # checkov:skip=CKV_AWS_117\n  # Justification: Lambda calls App Runner public API only; VPC adds cold starts and isn\u2019t required.\n  count                          = var.enable_secret_rotation_autodeploy ? 1 : 0\n  function_name                  = local.lambda_name\n  role                           = aws_iam_role.apprunner_redeploy[0].arn\n  handler                        = \"index.handler\"\n  runtime                        = \"python3.12\"\n  filename                       = data.archive_file.apprunner_redeploy_zip.output_path\n  source_code_hash               = data.archive_file.apprunner_redeploy_zip.output_base64sha256\n  kms_key_arn                    = module.kms_logs.kms_key_arn\n  # reserved_concurrent_executions = 2\n  timeout                        = 30\n  environment {\n    variables = {\n      APP_RUNNER_ARN = module.apprunner.service_arn\n    }\n  }\n  dead_letter_config {\n    target_arn = aws_sns_topic.lambda_dlq.arn\n  }\n  tags = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": "No comment provided"}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 3, "level": "warning", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/security-groups.tf"}, "region": {"startLine": 30, "endLine": 39, "snippet": {"text": "resource \"aws_security_group_rule\" \"ecs_tasks_egress_all\" {\n  # checkov:skip=CKV_AWS_382: This is normal for egress\u2011only SGs\n  type              = \"egress\"\n  security_group_id = aws_security_group.ecs_tasks.id\n  from_port         = 0\n  to_port           = 0\n  protocol          = \"-1\"\n  cidr_blocks       = [\"0.0.0.0/0\"]\n  description       = \"Allow outbound to VPC endpoints & S3\"\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": " This is normal for egress\u2011only SGs"}]}, {"ruleId": "CKV_AWS_305", "ruleIndex": 11, "level": "warning", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a default root object configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 108, "endLine": 178, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n  # checkov:skip=CKV_AWS_305 reason=\"Redirect-only distribution; default root object not applicable\"\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  web_acl_id          = var.web_acl_arn\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  dynamic \"logging_config\" {\n    for_each = var.log_bucket_name == null ? [] : [1]\n    content {\n      bucket          = \"${var.log_bucket_name}.s3.amazonaws.com\"\n      include_cookies = false\n      prefix          = \"cloudfront/redirect/${var.name_prefix}/\"\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": "No comment provided"}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 20, "level": "warning", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/secret_rotation.tf"}, "region": {"startLine": 2, "endLine": 19, "snippet": {"text": "resource \"aws_security_group\" \"sm_rotation\" {\n  # checkov:skip=CKV2_AWS_5\n  # Justification: This SG is attached to the SAR rotation Lambda via vpcSecurityGroupIds.\n  # The ENI is created inside the AWS-managed stack so Checkov can\u2019t see the link.\n  name        = \"${var.name_prefix}-sm-rotation\"\n  description = \"Secrets Manager rotation function egress within VPC\"\n  vpc_id      = module.vpc.vpc_id\n\n  egress {\n    description = \"Allow egress to VPC endpoints/NAT as required by Lambda runtime\"\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": "No comment provided"}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 20, "level": "warning", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/security-groups.tf"}, "region": {"startLine": 2, "endLine": 9, "snippet": {"text": "resource \"aws_security_group\" \"apprunner_connector\" {\n  # checkov:skip=CKV2_AWS_5\n  # Justification: In use by aws_apprunner_vpc_connector (security_groups=[...]).\n  name        = \"${var.name_prefix}-apprunner-connector-sg\"\n  description = \"App Runner VPC Connector\"\n  vpc_id      = module.vpc.vpc_id\n  tags        = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": "No comment provided"}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 20, "level": "warning", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/prod/security-groups.tf"}, "region": {"startLine": 18, "endLine": 28, "snippet": {"text": "resource \"aws_security_group\" \"ecs_tasks\" {\n  # checkov:skip=CKV2_AWS_5\n  # Justification: Used at runtime by ECS Fargate tasks via EventBridge target network_configuration.\n  name        = \"${var.name_prefix}-ecs-tasks-sg\"\n  description = \"Managed by Terraform\"\n  vpc_id      = module.vpc.vpc_id\n  tags        = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n\n  # Safety: avoid accidental destroy\n  lifecycle { prevent_destroy = true }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": "No comment provided"}]}, {"ruleId": "CKV2_AWS_65", "ruleIndex": 29, "level": "warning", "attachments": [], "message": {"text": "Ensure access control lists for S3 buckets are disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/logging/main.tf"}, "region": {"startLine": 21, "endLine": 27, "snippet": {"text": "resource \"aws_s3_bucket_ownership_controls\" \"logs\" {\n  # checkov:skip=CKV2_AWS_65: For access logging targets, prefer BucketOwnerPreferred so ACLs from AWS services are accepted\n  bucket = aws_s3_bucket.logs.id\n  rule {\n    object_ownership = \"BucketOwnerPreferred\"\n  }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": " For access logging targets, prefer BucketOwnerPreferred so ACLs from AWS services are accepted"}]}, {"ruleId": "CKV2_AWS_47", "ruleIndex": 30, "level": "warning", "attachments": [], "message": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 110, "endLine": 188, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = var.domain_name\n\n  aliases = [var.domain_name]\n\n  web_acl_id = var.web_acl_arn\n\n  origin {\n    domain_name = aws_s3_bucket.site.bucket_regional_domain_name\n    origin_id   = \"s3-origin-${var.domain_name}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\n    }\n  }\n\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-origin-${var.domain_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  dynamic \"custom_error_response\" {\n    for_each = var.spa_mode ? [403, 404] : []\n    content {\n      error_code            = custom_error_response.value\n      response_code         = 200\n      response_page_path    = \"/index.html\"\n      error_caching_min_ttl = 0\n    }\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn # must be in us-east-1\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": "No comment provided"}]}, {"ruleId": "CKV2_AWS_47", "ruleIndex": 30, "level": "warning", "attachments": [], "message": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 94, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  web_acl_id = var.web_acl_arn\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\"\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": "No comment provided"}]}, {"ruleId": "CKV2_AWS_47", "ruleIndex": 30, "level": "warning", "attachments": [], "message": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 108, "endLine": 178, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n  # checkov:skip=CKV_AWS_305 reason=\"Redirect-only distribution; default root object not applicable\"\n  # checkov:skip=CKV2_AWS_47 reason=\"Log4j protection implemented via AWSManagedRulesKnownBadInputsRuleSet with Log4JRCE rule_action_override and AWSManagedRulesAnonymousIpList\"\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  web_acl_id          = var.web_acl_arn\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  dynamic \"logging_config\" {\n    for_each = var.log_bucket_name == null ? [] : [1]\n    content {\n      bucket          = \"${var.log_bucket_name}.s3.amazonaws.com\"\n      include_cookies = false\n      prefix          = \"cloudfront/redirect/${var.name_prefix}/\"\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = var.geo_restriction_type\n      locations        = var.geo_locations\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": "No comment provided"}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 31, "level": "warning", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/logging/main.tf"}, "region": {"startLine": 9, "endLine": 14, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  # checkov:skip=CKV_AWS_18: Don't need logging for the logging bucket\n  bucket        = local.bucket_name\n  force_destroy = false\n  tags          = var.tags\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": " Don't need logging for the logging bucket"}]}, {"ruleId": "CKV2_AWS_57", "ruleIndex": 32, "level": "warning", "attachments": [], "message": {"text": "Ensure Secrets Manager secrets should have automatic rotation enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 124, "endLine": 128, "snippet": {"text": "resource \"aws_secretsmanager_secret\" \"db\" {\n  # checkov:skip=CKV2_AWS_57: Automatic rotation controlled by Lambda every 30 days \n  name = local.secret_name\n  tags = local.tags\n}\n"}}}}], "suppressions": [{"kind": "inSource", "justification": " Automatic rotation controlled by Lambda every 30 days "}]}]}]}