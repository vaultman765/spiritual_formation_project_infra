{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.461", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_119", "name": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK", "shortDescription": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "fullDescription": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "help": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK\nResource: aws_dynamodb_table.lock"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-52"}, {"id": "CKV_AWS_382", "name": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1", "shortDescription": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "fullDescription": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "help": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1\nResource: aws_security_group_rule.ecs_tasks_egress_all"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-382"}, {"id": "CKV_AWS_158", "name": "Ensure that CloudWatch Log Group is encrypted by KMS", "shortDescription": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "fullDescription": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "help": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS\nResource: module.apprunner.aws_cloudwatch_log_group.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-cloudwatch-log-group-is-encrypted-by-kms"}, {"id": "CKV_AWS_23", "name": "Ensure every security group and rule has a description", "shortDescription": {"text": "Ensure every security group and rule has a description"}, "fullDescription": {"text": "Ensure every security group and rule has a description"}, "help": {"text": "Ensure every security group and rule has a description\nResource: module.apprunner.aws_security_group.apprunner"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-31"}, {"id": "CKV_AWS_338", "name": "Ensure CloudWatch log groups retains logs for at least 1 year", "shortDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "fullDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "help": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year\nResource: module.client_vpn.aws_cloudwatch_log_group.cvpn[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-338"}, {"id": "CKV_AWS_310", "name": "Ensure CloudFront distributions should have origin failover configured", "shortDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "fullDescription": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "help": {"text": "Ensure CloudFront distributions should have origin failover configured\nResource: module.frontend_staging.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-310"}, {"id": "CKV_AWS_374", "name": "Ensure AWS CloudFront web distribution has geo restriction enabled", "shortDescription": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "fullDescription": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "help": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled\nResource: module.frontend_staging.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-374"}, {"id": "CKV_AWS_68", "name": "CloudFront Distribution should have WAF enabled", "shortDescription": {"text": "CloudFront Distribution should have WAF enabled"}, "fullDescription": {"text": "CloudFront Distribution should have WAF enabled"}, "help": {"text": "CloudFront Distribution should have WAF enabled\nResource: module.frontend_staging.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-27"}, {"id": "CKV_AWS_305", "name": "Ensure CloudFront distribution has a default root object configured", "shortDescription": {"text": "Ensure CloudFront distribution has a default root object configured"}, "fullDescription": {"text": "Ensure CloudFront distribution has a default root object configured"}, "help": {"text": "Ensure CloudFront distribution has a default root object configured\nResource: module.static_admin_staging.aws_cloudfront_distribution.static"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-305"}, {"id": "CKV_AWS_51", "name": "Ensure ECR Image Tags are immutable", "shortDescription": {"text": "Ensure ECR Image Tags are immutable"}, "fullDescription": {"text": "Ensure ECR Image Tags are immutable"}, "help": {"text": "Ensure ECR Image Tags are immutable\nResource: module.ecr_backend.aws_ecr_repository.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-24"}, {"id": "CKV_AWS_136", "name": "Ensure that ECR repositories are encrypted using KMS", "shortDescription": {"text": "Ensure that ECR repositories are encrypted using KMS"}, "fullDescription": {"text": "Ensure that ECR repositories are encrypted using KMS"}, "help": {"text": "Ensure that ECR repositories are encrypted using KMS\nResource: module.ecr_backend.aws_ecr_repository.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-ecr-repositories-are-encrypted"}, {"id": "CKV_AWS_149", "name": "Ensure that Secrets Manager secret is encrypted using KMS CMK", "shortDescription": {"text": "Ensure that Secrets Manager secret is encrypted using KMS CMK"}, "fullDescription": {"text": "Ensure that Secrets Manager secret is encrypted using KMS CMK"}, "help": {"text": "Ensure that Secrets Manager secret is encrypted using KMS CMK\nResource: module.rds.aws_secretsmanager_secret.db"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-secrets-manager-secret-is-encrypted-using-kms"}, {"id": "CKV_AWS_226", "name": "Ensure DB instance gets all minor upgrades automatically", "shortDescription": {"text": "Ensure DB instance gets all minor upgrades automatically"}, "fullDescription": {"text": "Ensure DB instance gets all minor upgrades automatically"}, "help": {"text": "Ensure DB instance gets all minor upgrades automatically\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-aws-db-instance-gets-all-minor-upgrades-automatically"}, {"id": "CKV_AWS_118", "name": "Ensure that enhanced monitoring is enabled for Amazon RDS instances", "shortDescription": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "fullDescription": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "help": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/ensure-that-enhanced-monitoring-is-enabled-for-amazon-rds-instances"}, {"id": "CKV_AWS_161", "name": "Ensure RDS database has IAM authentication enabled", "shortDescription": {"text": "Ensure RDS database has IAM authentication enabled"}, "fullDescription": {"text": "Ensure RDS database has IAM authentication enabled"}, "help": {"text": "Ensure RDS database has IAM authentication enabled\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-rds-database-has-iam-authentication-enabled"}, {"id": "CKV_AWS_293", "name": "Ensure that AWS database instances have deletion protection enabled", "shortDescription": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "fullDescription": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "help": {"text": "Ensure that AWS database instances have deletion protection enabled\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-293"}, {"id": "CKV_AWS_353", "name": "Ensure that RDS instances have performance insights enabled", "shortDescription": {"text": "Ensure that RDS instances have performance insights enabled"}, "fullDescription": {"text": "Ensure that RDS instances have performance insights enabled"}, "help": {"text": "Ensure that RDS instances have performance insights enabled\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-353"}, {"id": "CKV_AWS_157", "name": "Ensure that RDS instances have Multi-AZ enabled", "shortDescription": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "fullDescription": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "help": {"text": "Ensure that RDS instances have Multi-AZ enabled\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/general-73"}, {"id": "CKV_AWS_233", "name": "Ensure Create before destroy for ACM certificates", "shortDescription": {"text": "Ensure Create before destroy for ACM certificates"}, "fullDescription": {"text": "Ensure Create before destroy for ACM certificates"}, "help": {"text": "Ensure Create before destroy for ACM certificates\nResource: module.redirect_mwc_prod.aws_acm_certificate.cert"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-aws-acm-certificate-enables-create-before-destroy"}, {"id": "CKV_AWS_86", "name": "Ensure CloudFront distribution has Access Logging enabled", "shortDescription": {"text": "Ensure CloudFront distribution has Access Logging enabled"}, "fullDescription": {"text": "Ensure CloudFront distribution has Access Logging enabled"}, "help": {"text": "Ensure CloudFront distribution has Access Logging enabled\nResource: module.redirect_mwc_prod.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/logging-20"}, {"id": "CKV_AWS_130", "name": "Ensure VPC subnets do not assign public IP by default", "shortDescription": {"text": "Ensure VPC subnets do not assign public IP by default"}, "fullDescription": {"text": "Ensure VPC subnets do not assign public IP by default"}, "help": {"text": "Ensure VPC subnets do not assign public IP by default\nResource: module.vpc.aws_subnet.public"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-vpc-subnets-do-not-assign-public-ip-by-default"}, {"id": "CKV2_AWS_32", "name": "Ensure CloudFront distribution has a response headers policy attached", "shortDescription": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "fullDescription": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "help": {"text": "Ensure CloudFront distribution has a response headers policy attached\nResource: module.frontend_staging.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-networking-65"}, {"id": "CKV2_AWS_47", "name": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability", "shortDescription": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "fullDescription": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "help": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability\nResource: module.frontend_staging.aws_cloudfront_distribution.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-47"}, {"id": "CKV2_AWS_65", "name": "Ensure access control lists for S3 buckets are disabled", "shortDescription": {"text": "Ensure access control lists for S3 buckets are disabled"}, "fullDescription": {"text": "Ensure access control lists for S3 buckets are disabled"}, "help": {"text": "Ensure access control lists for S3 buckets are disabled\nResource: module.logging.aws_s3_bucket_ownership_controls.logs"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-112"}, {"id": "CKV2_AWS_38", "name": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones", "shortDescription": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "fullDescription": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "help": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones\nResource: module.route53_acm_api_staging.aws_route53_zone.hosted"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/bc-aws-2-38"}, {"id": "CKV2_AWS_62", "name": "Ensure S3 buckets should have event notifications enabled", "shortDescription": {"text": "Ensure S3 buckets should have event notifications enabled"}, "fullDescription": {"text": "Ensure S3 buckets should have event notifications enabled"}, "help": {"text": "Ensure S3 buckets should have event notifications enabled\nResource: aws_s3_bucket.state"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-62"}, {"id": "CKV2_AWS_57", "name": "Ensure Secrets Manager secrets should have automatic rotation enabled", "shortDescription": {"text": "Ensure Secrets Manager secrets should have automatic rotation enabled"}, "fullDescription": {"text": "Ensure Secrets Manager secrets should have automatic rotation enabled"}, "help": {"text": "Ensure Secrets Manager secrets should have automatic rotation enabled\nResource: module.rds.aws_secretsmanager_secret.db"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-2-57"}, {"id": "CKV2_AWS_5", "name": "Ensure that Security Groups are attached to another resource", "shortDescription": {"text": "Ensure that Security Groups are attached to another resource"}, "fullDescription": {"text": "Ensure that Security Groups are attached to another resource"}, "help": {"text": "Ensure that Security Groups are attached to another resource\nResource: aws_security_group.apprunner_connector"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-that-security-groups-are-attached-to-ec2-instances-or-elastic-network-interfaces-enis"}, {"id": "CKV2_AWS_11", "name": "Ensure VPC flow logging is enabled in all VPCs", "shortDescription": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "fullDescription": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "help": {"text": "Ensure VPC flow logging is enabled in all VPCs\nResource: module.vpc.aws_vpc.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/logging-9-enable-vpc-flow-logging"}, {"id": "CKV2_AWS_12", "name": "Ensure the default security group of every VPC restricts all traffic", "shortDescription": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "fullDescription": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "help": {"text": "Ensure the default security group of every VPC restricts all traffic\nResource: module.vpc.aws_vpc.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-4"}, {"id": "CKV2_AWS_39", "name": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones", "shortDescription": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "fullDescription": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "help": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones\nResource: module.route53_acm_api_staging.aws_route53_zone.hosted"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-39"}, {"id": "CKV2_AWS_30", "name": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled", "shortDescription": {"text": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled"}, "fullDescription": {"text": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled"}, "help": {"text": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled\nResource: module.rds.aws_db_instance.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-postgres-rds-has-query-logging-enabled"}, {"id": "CKV_AWS_144", "name": "Ensure that S3 bucket has cross-region replication enabled", "shortDescription": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "fullDescription": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "help": {"text": "Ensure that S3 bucket has cross-region replication enabled\nResource: aws_s3_bucket.state"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-bucket-has-cross-region-replication-enabled"}, {"id": "CKV2_AWS_61", "name": "Ensure that an S3 bucket has a lifecycle configuration", "shortDescription": {"text": "Ensure that an S3 bucket has a lifecycle configuration"}, "fullDescription": {"text": "Ensure that an S3 bucket has a lifecycle configuration"}, "help": {"text": "Ensure that an S3 bucket has a lifecycle configuration\nResource: aws_s3_bucket.state"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-2-61"}, {"id": "CKV_AWS_18", "name": "Ensure the S3 bucket has access logging enabled", "shortDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "fullDescription": {"text": "Ensure the S3 bucket has access logging enabled"}, "help": {"text": "Ensure the S3 bucket has access logging enabled\nResource: aws_s3_bucket.state"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-13-enable-logging"}, {"id": "CKV_AWS_145", "name": "Ensure that S3 buckets are encrypted with KMS by default", "shortDescription": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "fullDescription": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "help": {"text": "Ensure that S3 buckets are encrypted with KMS by default\nResource: aws_s3_bucket.state"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-s3-buckets-are-encrypted-with-kms-by-default"}, {"id": "CKV_AWS_21", "name": "Ensure all data stored in the S3 bucket have versioning enabled", "shortDescription": {"text": "Ensure all data stored in the S3 bucket have versioning enabled"}, "fullDescription": {"text": "Ensure all data stored in the S3 bucket have versioning enabled"}, "help": {"text": "Ensure all data stored in the S3 bucket have versioning enabled\nResource: module.logging.aws_s3_bucket.logs"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-16-enable-versioning"}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_119", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure DynamoDB Tables are encrypted using a KMS Customer Managed CMK"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "bootstrap/main.tf"}, "region": {"startLine": 28, "endLine": 47, "snippet": {"text": "resource \"aws_dynamodb_table\" \"lock\" {\n  name         = local.lock_table\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n\n  server_side_encryption {\n    enabled     = true\n  }\n\n  point_in_time_recovery {\n    enabled = true\n  }\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/staging/security-groups.tf"}, "region": {"startLine": 25, "endLine": 33, "snippet": {"text": "resource \"aws_security_group_rule\" \"ecs_tasks_egress_all\" {\n  type              = \"egress\"\n  security_group_id = aws_security_group.ecs_tasks.id\n  from_port         = 0\n  to_port           = 0\n  protocol          = \"-1\"\n  cidr_blocks       = [\"0.0.0.0/0\"]\n  description       = \"Allow outbound to VPC endpoints & S3\"\n}\n"}}}}]}, {"ruleId": "CKV_AWS_158", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/apprunner/main.tf"}, "region": {"startLine": 9, "endLine": 13, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"this\" {\n  name              = \"/aws/apprunner/${var.name_prefix}\"\n  retention_in_days = var.log_retention_days\n  tags              = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/apprunner/main.tf"}, "region": {"startLine": 16, "endLine": 27, "snippet": {"text": "resource \"aws_security_group\" \"apprunner\" {\n  name        = \"${var.name_prefix}-apprunner-sg\"\n  description = \"App Runner VPC egress\"\n  vpc_id      = var.vpc_id\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/apprunner/main.tf"}, "region": {"startLine": 16, "endLine": 27, "snippet": {"text": "resource \"aws_security_group\" \"apprunner\" {\n  name        = \"${var.name_prefix}-apprunner-sg\"\n  description = \"App Runner VPC egress\"\n  vpc_id      = var.vpc_id\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_158", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/client_vpn/main.tf"}, "region": {"startLine": 7, "endLine": 12, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"cvpn\" {\n  count             = var.enable_connection_logs ? 1 : 0\n  name              = \"/aws/vpn/${local.name}\"\n  retention_in_days = 14\n  tags              = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/client_vpn/main.tf"}, "region": {"startLine": 7, "endLine": 12, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"cvpn\" {\n  count             = var.enable_connection_logs ? 1 : 0\n  name              = \"/aws/vpn/${local.name}\"\n  retention_in_days = 14\n  tags              = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/client_vpn/main.tf"}, "region": {"startLine": 15, "endLine": 26, "snippet": {"text": "resource \"aws_security_group\" \"cvpn\" {\n  name        = \"${local.name}-sg\"\n  description = \"Client VPN endpoint SG\"\n  vpc_id      = var.vpc_id\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/client_vpn/main.tf"}, "region": {"startLine": 15, "endLine": 26, "snippet": {"text": "resource \"aws_security_group\" \"cvpn\" {\n  name        = \"${local.name}-sg\"\n  description = \"Client VPN endpoint SG\"\n  vpc_id      = var.vpc_id\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_310", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 67, "endLine": 139, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = var.domain_name\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name = aws_s3_bucket.site.bucket_regional_domain_name\n    origin_id   = \"s3-origin-${var.domain_name}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\n    }\n  }\n\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-origin-${var.domain_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  dynamic \"custom_error_response\" {\n    for_each = var.spa_mode ? [403, 404] : []\n    content {\n      error_code            = custom_error_response.value\n      response_code         = 200\n      response_page_path    = \"/index.html\"\n      error_caching_min_ttl = 0\n    }\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn # must be in us-east-1\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_374", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 67, "endLine": 139, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = var.domain_name\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name = aws_s3_bucket.site.bucket_regional_domain_name\n    origin_id   = \"s3-origin-${var.domain_name}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\n    }\n  }\n\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-origin-${var.domain_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  dynamic \"custom_error_response\" {\n    for_each = var.spa_mode ? [403, 404] : []\n    content {\n      error_code            = custom_error_response.value\n      response_code         = 200\n      response_page_path    = \"/index.html\"\n      error_caching_min_ttl = 0\n    }\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn # must be in us-east-1\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_68", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "CloudFront Distribution should have WAF enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 67, "endLine": 139, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = var.domain_name\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name = aws_s3_bucket.site.bucket_regional_domain_name\n    origin_id   = \"s3-origin-${var.domain_name}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\n    }\n  }\n\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-origin-${var.domain_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  dynamic \"custom_error_response\" {\n    for_each = var.spa_mode ? [403, 404] : []\n    content {\n      error_code            = custom_error_response.value\n      response_code         = 200\n      response_page_path    = \"/index.html\"\n      error_caching_min_ttl = 0\n    }\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn # must be in us-east-1\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_305", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a default root object configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 90, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\" # static only; no index.html assumed\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_310", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 90, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\" # static only; no index.html assumed\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_374", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 90, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\" # static only; no index.html assumed\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_68", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "CloudFront Distribution should have WAF enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 90, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\" # static only; no index.html assumed\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_51", "ruleIndex": 9, "level": "error", "attachments": [], "message": {"text": "Ensure ECR Image Tags are immutable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/ecr/main.tf"}, "region": {"startLine": 1, "endLine": 6, "snippet": {"text": "resource \"aws_ecr_repository\" \"this\" {\n  name                 = var.repository_name\n  image_tag_mutability = var.image_tag_mutability\n  image_scanning_configuration { scan_on_push = var.scan_on_push }\n  encryption_configuration { encryption_type = \"AES256\" }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_136", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "Ensure that ECR repositories are encrypted using KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/ecr/main.tf"}, "region": {"startLine": 1, "endLine": 6, "snippet": {"text": "resource \"aws_ecr_repository\" \"this\" {\n  name                 = var.repository_name\n  image_tag_mutability = var.image_tag_mutability\n  image_scanning_configuration { scan_on_push = var.scan_on_push }\n  encryption_configuration { encryption_type = \"AES256\" }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_158", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/ecs_import_job/main.tf"}, "region": {"startLine": 17, "endLine": 21, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"this\" {\n  name              = \"/ecs/${local.name}\"\n  retention_in_days = var.log_retention_days\n  tags              = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/ecs_import_job/main.tf"}, "region": {"startLine": 17, "endLine": 21, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"this\" {\n  name              = \"/ecs/${local.name}\"\n  retention_in_days = var.log_retention_days\n  tags              = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_149", "ruleIndex": 11, "level": "error", "attachments": [], "message": {"text": "Ensure that Secrets Manager secret is encrypted using KMS CMK"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 114, "endLine": 117, "snippet": {"text": "resource \"aws_secretsmanager_secret\" \"db\" {\n  name = local.secret_name\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_226", "ruleIndex": 12, "level": "error", "attachments": [], "message": {"text": "Ensure DB instance gets all minor upgrades automatically"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 120, "endLine": 177, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible = false\n  multi_az            = var.multi_az\n  apply_immediately   = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false  # prod can override to true later\n\n\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_118", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Ensure that enhanced monitoring is enabled for Amazon RDS instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 120, "endLine": 177, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible = false\n  multi_az            = var.multi_az\n  apply_immediately   = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false  # prod can override to true later\n\n\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_161", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Ensure RDS database has IAM authentication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 120, "endLine": 177, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible = false\n  multi_az            = var.multi_az\n  apply_immediately   = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false  # prod can override to true later\n\n\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_293", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS database instances have deletion protection enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 120, "endLine": 177, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible = false\n  multi_az            = var.multi_az\n  apply_immediately   = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false  # prod can override to true later\n\n\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_353", "ruleIndex": 16, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS instances have performance insights enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 120, "endLine": 177, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible = false\n  multi_az            = var.multi_az\n  apply_immediately   = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false  # prod can override to true later\n\n\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_157", "ruleIndex": 17, "level": "error", "attachments": [], "message": {"text": "Ensure that RDS instances have Multi-AZ enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 120, "endLine": 177, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible = false\n  multi_az            = var.multi_az\n  apply_immediately   = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false  # prod can override to true later\n\n\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_158", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 209, "endLine": 213, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"rds_postgresql\" {\n  count             = var.enabled && var.identifier != \"\" ? 1 : 0\n  name              = \"/aws/rds/instance/${var.identifier}/postgresql\"\n  retention_in_days = var.rds_log_retention_days\n}"}}}}]}, {"ruleId": "CKV_AWS_233", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Ensure Create before destroy for ACM certificates"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 27, "endLine": 34, "snippet": {"text": "resource \"aws_acm_certificate\" \"cert\" {\n  provider                  = aws.us_east_1\n  domain_name               = var.from_domains[0]\n  validation_method         = \"DNS\"\n  subject_alternative_names = length(var.from_domains) > 1 ? slice(var.from_domains, 1, length(var.from_domains)) : null\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_305", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a default root object configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_86", "ruleIndex": 19, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has Access Logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_310", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_374", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_68", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "CloudFront Distribution should have WAF enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_233", "ruleIndex": 18, "level": "error", "attachments": [], "message": {"text": "Ensure Create before destroy for ACM certificates"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 27, "endLine": 34, "snippet": {"text": "resource \"aws_acm_certificate\" \"cert\" {\n  provider                  = aws.us_east_1\n  domain_name               = var.from_domains[0]\n  validation_method         = \"DNS\"\n  subject_alternative_names = length(var.from_domains) > 1 ? slice(var.from_domains, 1, length(var.from_domains)) : null\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_305", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a default root object configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_86", "ruleIndex": 19, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has Access Logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_310", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distributions should have origin failover configured"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_374", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront web distribution has geo restriction enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_68", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "CloudFront Distribution should have WAF enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_23", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure every security group and rule has a description"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/endpoints/main.tf"}, "region": {"startLine": 16, "endLine": 41, "snippet": {"text": "resource \"aws_security_group\" \"vpce\" {\n  name        = local.sg_name\n  description = \"Allow HTTPS to VPC endpoints\"\n  vpc_id      = var.vpc_id\n\n  # Ingress from the whole VPC CIDR (matches your current file)\n  dynamic \"ingress\" {\n    for_each = var.allow_from_vpc_cidr ? [1] : []\n    content {\n      from_port   = 443\n      to_port     = 443\n      protocol    = \"tcp\"\n      cidr_blocks = [data.aws_vpc.this.cidr_block]\n    }\n  }\n\n  # Egress allow all (matches your current file)\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_382", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/endpoints/main.tf"}, "region": {"startLine": 16, "endLine": 41, "snippet": {"text": "resource \"aws_security_group\" \"vpce\" {\n  name        = local.sg_name\n  description = \"Allow HTTPS to VPC endpoints\"\n  vpc_id      = var.vpc_id\n\n  # Ingress from the whole VPC CIDR (matches your current file)\n  dynamic \"ingress\" {\n    for_each = var.allow_from_vpc_cidr ? [1] : []\n    content {\n      from_port   = 443\n      to_port     = 443\n      protocol    = \"tcp\"\n      cidr_blocks = [data.aws_vpc.this.cidr_block]\n    }\n  }\n\n  # Egress allow all (matches your current file)\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_130", "ruleIndex": 20, "level": "error", "attachments": [], "message": {"text": "Ensure VPC subnets do not assign public IP by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/main.tf"}, "region": {"startLine": 37, "endLine": 44, "snippet": {"text": "resource \"aws_subnet\" \"public\" {\n  for_each                = local.create_vpc ? { for idx, cidr in var.public_subnet_cidrs : idx => cidr } : {}\n  vpc_id                  = aws_vpc.this[0].id\n  cidr_block              = each.value\n  availability_zone       = local.azs[tonumber(each.key)]\n  map_public_ip_on_launch = true\n  tags                    = merge(local.tags, { Name = \"${var.name_prefix}-public-${each.key}\" })\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_32", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 67, "endLine": 139, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = var.domain_name\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name = aws_s3_bucket.site.bucket_regional_domain_name\n    origin_id   = \"s3-origin-${var.domain_name}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\n    }\n  }\n\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-origin-${var.domain_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  dynamic \"custom_error_response\" {\n    for_each = var.spa_mode ? [403, 404] : []\n    content {\n      error_code            = custom_error_response.value\n      response_code         = 200\n      response_page_path    = \"/index.html\"\n      error_caching_min_ttl = 0\n    }\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn # must be in us-east-1\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_32", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 90, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\" # static only; no index.html assumed\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_32", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_32", "ruleIndex": 21, "level": "error", "attachments": [], "message": {"text": "Ensure CloudFront distribution has a response headers policy attached"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_47", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 67, "endLine": 139, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = var.domain_name\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name = aws_s3_bucket.site.bucket_regional_domain_name\n    origin_id   = \"s3-origin-${var.domain_name}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\n    }\n  }\n\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-origin-${var.domain_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  dynamic \"custom_error_response\" {\n    for_each = var.spa_mode ? [403, 404] : []\n    content {\n      error_code            = custom_error_response.value\n      response_code         = 200\n      response_page_path    = \"/index.html\"\n      error_caching_min_ttl = 0\n    }\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn # must be in us-east-1\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_47", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_static/main.tf"}, "region": {"startLine": 26, "endLine": 90, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"static\" {\n  provider = aws.us_east_1\n\n  enabled         = true\n  is_ipv6_enabled = true\n  comment         = \"Static assets for ${var.domain_name}\"\n\n  aliases = [var.domain_name]\n\n  origin {\n    domain_name              = \"${var.bucket_name}.s3.${var.region}.amazonaws.com\"\n    origin_id                = \"s3-${var.bucket_name}\"\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n\n    # Optional path within the bucket, e.g. /django/static\n    origin_path = var.origin_path\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"s3-${var.bucket_name}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n\n    allowed_methods = [\"GET\", \"HEAD\", \"OPTIONS\"]\n    cached_methods  = [\"GET\", \"HEAD\"]\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    min_ttl     = var.min_ttl\n    default_ttl = var.default_ttl\n    max_ttl     = var.max_ttl\n\n    response_headers_policy_id = var.response_headers_policy_id\n  }\n\n  price_class = var.price_class\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = var.acm_certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  default_root_object = \"\" # static only; no index.html assumed\n\n  logging_config {\n    bucket          = var.log_bucket_name == null ? null : \"${var.log_bucket_name}.s3.amazonaws.com\"\n    include_cookies = false\n    prefix          = \"cloudfront/${var.domain_name}/\"\n  }\n\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_47", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_47", "ruleIndex": 22, "level": "error", "attachments": [], "message": {"text": "Ensure AWS CloudFront attached WAFv2 WebACL is configured with AMR for Log4j Vulnerability"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/redirect_domain/main.tf"}, "region": {"startLine": 104, "endLine": 157, "snippet": {"text": "resource \"aws_cloudfront_distribution\" \"this\" {\n  provider = aws.us_east_1\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = local.comment\n  aliases             = var.from_domains\n  price_class         = var.price_class\n  wait_for_deployment = true\n  tags                = local.tags\n\n  origin {\n    domain_name = \"example.com\"\n    origin_id   = \"dummy-origin\"\n    custom_origin_config {\n      http_port                = 80\n      https_port               = 443\n      origin_protocol_policy   = \"https-only\"\n      origin_ssl_protocols     = [\"TLSv1.2\"]\n      origin_keepalive_timeout = 5\n      origin_read_timeout      = 30\n    }\n  }\n\n  default_cache_behavior {\n    target_origin_id       = \"dummy-origin\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    allowed_methods        = [\"GET\", \"HEAD\"]\n    cached_methods         = [\"GET\", \"HEAD\"]\n    min_ttl                = 0\n    default_ttl            = 300\n    max_ttl                = 300\n\n    forwarded_values {\n      query_string = true\n      cookies { forward = \"none\" }\n    }\n\n    function_association {\n      event_type   = \"viewer-request\"\n      function_arn = aws_cloudfront_function.redirect.arn\n    }\n  }\n\n  restrictions {\n    geo_restriction { restriction_type = \"none\" }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate_validation.cert.certificate_arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_65", "ruleIndex": 23, "level": "error", "attachments": [], "message": {"text": "Ensure access control lists for S3 buckets are disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/logging/main.tf"}, "region": {"startLine": 7, "endLine": 12, "snippet": {"text": "resource \"aws_s3_bucket_ownership_controls\" \"logs\" {\n  bucket = aws_s3_bucket.logs.id\n  rule {\n    object_ownership = \"ObjectWriter\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_38", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_38", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_38", "ruleIndex": 24, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System Security Extensions (DNSSEC) signing is enabled for Amazon Route 53 public hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_62", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure S3 buckets should have event notifications enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "bootstrap/main.tf"}, "region": {"startLine": 1, "endLine": 4, "snippet": {"text": "resource \"aws_s3_bucket\" \"state\" {\n  bucket = local.bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_62", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure S3 buckets should have event notifications enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 19, "endLine": 26, "snippet": {"text": "resource \"aws_s3_bucket\" \"site\" {\n  bucket = local.bucket_name\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_62", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure S3 buckets should have event notifications enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/logging/main.tf"}, "region": {"startLine": 1, "endLine": 5, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  bucket        = \"${var.name_prefix}-logs\"\n  force_destroy = false\n  tags          = var.tags\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_62", "ruleIndex": 25, "level": "error", "attachments": [], "message": {"text": "Ensure S3 buckets should have event notifications enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/s3/main.tf"}, "region": {"startLine": 134, "endLine": 138, "snippet": {"text": "resource \"aws_s3_bucket\" \"frontend\" {\n  count  = var.create_frontend_bucket ? 1 : 0\n  bucket = local.frontend_bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_57", "ruleIndex": 26, "level": "error", "attachments": [], "message": {"text": "Ensure Secrets Manager secrets should have automatic rotation enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 114, "endLine": 117, "snippet": {"text": "resource \"aws_secretsmanager_secret\" \"db\" {\n  name = local.secret_name\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/staging/security-groups.tf"}, "region": {"startLine": 2, "endLine": 12, "snippet": {"text": "resource \"aws_security_group\" \"apprunner_connector\" {\n  name   = \"${var.name_prefix}-apprunner-connector-sg\"\n  vpc_id = module.vpc.vpc_id\n  description = \"App Runner VPC connector SG\"\n  tags = {\n    Project = var.project\n    Env     = var.env\n    Role    = \"AppRunnerConnector\"\n    Managed = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "envs/staging/security-groups.tf"}, "region": {"startLine": 15, "endLine": 23, "snippet": {"text": "resource \"aws_security_group\" \"ecs_tasks\" {\n  name        = \"spiritual-formation-staging-ecs-tasks-sg\"\n  description = \"Managed by Terraform\"\n  vpc_id      = module.vpc.vpc_id\n  tags        = { Project = var.project, Env = var.env, Managed = \"Terraform\" }\n\n  # Safety: avoid accidental destroy\n  lifecycle { prevent_destroy = true }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 27, "level": "error", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 36, "endLine": 42, "snippet": {"text": "resource \"aws_security_group\" \"rds\" {\n  count       = var.enabled ? 1 : 0\n  name        = \"${var.name_prefix}-rds-sg\"\n  description = \"Allow Postgres from app runner + ecs + (optional) admin\"\n  vpc_id      = var.vpc_id\n  tags        = merge(local.tags, { Name = \"${var.name_prefix}-rds-sg\" })\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_11", "ruleIndex": 28, "level": "error", "attachments": [], "message": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/main.tf"}, "region": {"startLine": 20, "endLine": 28, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count                = local.create_vpc ? 1 : 0\n  cidr_block           = var.cidr_block\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  tags = merge(local.tags, {\n    Name = length(var.name_prefix) > 0 ? \"${var.name_prefix}-vpc\" : \"vpc\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 29, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc/main.tf"}, "region": {"startLine": 20, "endLine": 28, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count                = local.create_vpc ? 1 : 0\n  cidr_block           = var.cidr_block\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  tags = merge(local.tags, {\n    Name = length(var.name_prefix) > 0 ? \"${var.name_prefix}-vpc\" : \"vpc\"\n  })\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_39", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_39", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_39", "ruleIndex": 30, "level": "error", "attachments": [], "message": {"text": "Ensure Domain Name System (DNS) query logging is enabled for Amazon Route 53 hosted zones"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/route53_acm/main.tf"}, "region": {"startLine": 13, "endLine": 16, "snippet": {"text": "resource \"aws_route53_zone\" \"hosted\" {\n  count = var.manage_zone ? 1 : 0\n  name  = var.root_domain_name\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_30", "ruleIndex": 31, "level": "error", "attachments": [], "message": {"text": "Ensure Postgres RDS as aws_db_instance has Query Logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/rds/main.tf"}, "region": {"startLine": 120, "endLine": 177, "snippet": {"text": "resource \"aws_db_instance\" \"this\" {\n  count = var.enabled ? 1 : 0\n\n  identifier = var.identifier != \"\" ? var.identifier : null\n\n  snapshot_identifier = (\n    var.restore_snapshot_identifier != \"\" ? var.restore_snapshot_identifier :\n    (var.restore_from_latest_snapshot && length(data.aws_db_snapshot.latest) > 0\n      ? data.aws_db_snapshot.latest[0].id\n    : null)\n  )\n\n  engine         = \"postgres\"\n  engine_version = var.engine_version\n  instance_class = var.instance_class\n\n  db_subnet_group_name   = aws_db_subnet_group.this[0].name\n  vpc_security_group_ids = [aws_security_group.rds[0].id]\n  parameter_group_name   = aws_db_parameter_group.pg[0].name\n\n  db_name  = var.db_name\n  username = var.db_username\n  password = random_password.db.result\n\n  allocated_storage     = var.allocated_storage_gb\n  max_allocated_storage = var.max_allocated_storage_gb\n  storage_encrypted     = true\n\n  publicly_accessible = false\n  multi_az            = var.multi_az\n  apply_immediately   = true\n\n  # Guarantees groups exist before we modify the instance to use them\n  depends_on = [\n    aws_db_parameter_group.pg,\n    aws_db_subnet_group.this,\n  ]\n\n  # Backups & protection (env-gated via variables)\n  backup_retention_period = 3\n  backup_window           = \"22:00-23:00\"\n  maintenance_window      = \"Mon:00:00-Mon:01:00\"\n  deletion_protection     = var.deletion_protection\n  copy_tags_to_snapshot   = true\n\n  skip_final_snapshot       = false\n  final_snapshot_identifier = \"${var.final_snapshot_prefix}-${replace(time_static.final.rfc3339, \":\", \"-\")}\"\n\n  # Export engine logs to CloudWatch (for Checkov CKV2_AWS_30)\n  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports\n\n  # (Optional but useful)\n  performance_insights_enabled = false  # prod can override to true later\n\n\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "bootstrap/main.tf"}, "region": {"startLine": 1, "endLine": 4, "snippet": {"text": "resource \"aws_s3_bucket\" \"state\" {\n  bucket = local.bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 19, "endLine": 26, "snippet": {"text": "resource \"aws_s3_bucket\" \"site\" {\n  bucket = local.bucket_name\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/logging/main.tf"}, "region": {"startLine": 1, "endLine": 5, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  bucket        = \"${var.name_prefix}-logs\"\n  force_destroy = false\n  tags          = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/s3/main.tf"}, "region": {"startLine": 12, "endLine": 15, "snippet": {"text": "resource \"aws_s3_bucket\" \"metadata\" {\n  bucket = local.metadata_bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_144", "ruleIndex": 32, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 bucket has cross-region replication enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/s3/main.tf"}, "region": {"startLine": 134, "endLine": 138, "snippet": {"text": "resource \"aws_s3_bucket\" \"frontend\" {\n  count  = var.create_frontend_bucket ? 1 : 0\n  bucket = local.frontend_bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_61", "ruleIndex": 33, "level": "error", "attachments": [], "message": {"text": "Ensure that an S3 bucket has a lifecycle configuration"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "bootstrap/main.tf"}, "region": {"startLine": 1, "endLine": 4, "snippet": {"text": "resource \"aws_s3_bucket\" \"state\" {\n  bucket = local.bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_61", "ruleIndex": 33, "level": "error", "attachments": [], "message": {"text": "Ensure that an S3 bucket has a lifecycle configuration"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 19, "endLine": 26, "snippet": {"text": "resource \"aws_s3_bucket\" \"site\" {\n  bucket = local.bucket_name\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 34, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "bootstrap/main.tf"}, "region": {"startLine": 1, "endLine": 4, "snippet": {"text": "resource \"aws_s3_bucket\" \"state\" {\n  bucket = local.bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 34, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 19, "endLine": 26, "snippet": {"text": "resource \"aws_s3_bucket\" \"site\" {\n  bucket = local.bucket_name\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_18", "ruleIndex": 34, "level": "error", "attachments": [], "message": {"text": "Ensure the S3 bucket has access logging enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/logging/main.tf"}, "region": {"startLine": 1, "endLine": 5, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  bucket        = \"${var.name_prefix}-logs\"\n  force_destroy = false\n  tags          = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_145", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "bootstrap/main.tf"}, "region": {"startLine": 1, "endLine": 4, "snippet": {"text": "resource \"aws_s3_bucket\" \"state\" {\n  bucket = local.bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_145", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/cloudfront_site/main.tf"}, "region": {"startLine": 19, "endLine": 26, "snippet": {"text": "resource \"aws_s3_bucket\" \"site\" {\n  bucket = local.bucket_name\n  tags = {\n    Project     = var.project\n    Environment = var.env\n    ManagedBy   = \"Terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_145", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/logging/main.tf"}, "region": {"startLine": 1, "endLine": 5, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  bucket        = \"${var.name_prefix}-logs\"\n  force_destroy = false\n  tags          = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_145", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/s3/main.tf"}, "region": {"startLine": 12, "endLine": 15, "snippet": {"text": "resource \"aws_s3_bucket\" \"metadata\" {\n  bucket = local.metadata_bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_145", "ruleIndex": 35, "level": "error", "attachments": [], "message": {"text": "Ensure that S3 buckets are encrypted with KMS by default"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/s3/main.tf"}, "region": {"startLine": 134, "endLine": 138, "snippet": {"text": "resource \"aws_s3_bucket\" \"frontend\" {\n  count  = var.create_frontend_bucket ? 1 : 0\n  bucket = local.frontend_bucket_name\n  tags   = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_21", "ruleIndex": 36, "level": "error", "attachments": [], "message": {"text": "Ensure all data stored in the S3 bucket have versioning enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/logging/main.tf"}, "region": {"startLine": 1, "endLine": 5, "snippet": {"text": "resource \"aws_s3_bucket\" \"logs\" {\n  bucket        = \"${var.name_prefix}-logs\"\n  force_destroy = false\n  tags          = var.tags\n}\n"}}}}]}]}]}